require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"MultiTouchEvents":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
var LayerPinch, _angles, _distances, _fingers, _midPoints,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Events.Pinch = "pinch";

Events.PinchEnd = "pinchend";

_fingers = [];

_distances = [];

_angles = [];

_midPoints = [];

exports.LayerMultiTouchGesture = (function(superClass) {
  extend(LayerMultiTouchGesture, superClass);

  function LayerMultiTouchGesture(options) {
    if (options == null) {
      options = {};
    }
    LayerMultiTouchGesture.__super__.constructor.call(this, options);
  }

  LayerMultiTouchGesture.define("pinch", {
    get: function() {
      return this._pinch != null ? this._pinch : this._pinch = new LayerPinch(this);
    },
    set: function() {
      if (_isBoolean(value)) {
        return this.pinch.enabled = value;
      }
    }
  });

  return LayerMultiTouchGesture;

})(Framer.Layer);

window.Layer = exports.LayerMultiTouchGesture;

LayerPinch = (function(superClass) {
  extend(LayerPinch, superClass);

  LayerPinch.define("propagateEvents", LayerPinch.simpleProperty("propagateEvents", true));

  function LayerPinch(layer) {
    this.layer = layer;
    this._pinchEnd = bind(this._pinchEnd, this);
    this._pinch = bind(this._pinch, this);
    this._pinchStart = bind(this._pinchStart, this);
    LayerPinch.__super__.constructor.apply(this, arguments);
    this.enabled = true;
    this.attach();
  }

  LayerPinch.prototype.attach = function() {
    return this.layer.on(Events.TouchStart, this._pinchStart);
  };

  LayerPinch.prototype.remove = function() {
    return this.layer.off(Events.TouchStart, this._pinchStart);
  };

  LayerPinch.prototype._pinchStart = function(event) {
    if (Utils.isMobile()) {
      this._fingers = event.targetTouches.length;
      if (this._fingers >= 2) {
        document.addEventListener(Events.TouchMove, this._pinch);
        return document.addEventListener(Events.TouchEnd, this._pinchEnd);
      }
    }
  };

  LayerPinch.prototype._pinch = function(event) {
    if (!this.enabled) {
      return;
    }
    event.preventDefault();
    if (!this.propagateEvents) {
      event.stopPropagation();
    }
    this._isPinching = true;
    this._fingers = event.targetTouches.length;
    if (this._fingers >= 2) {
      this._calculateDistance(event);
      this._calculateDirection(event);
      this._calculateAngle(event);
      this._calculateMidPoint(event);
      return this.layer.emit(Events.Pinch, event);
    }
  };

  LayerPinch.prototype._pinchEnd = function(event) {
    if (event.targetTouches.length <= 0 && this._isPinching) {
      if (!this.propagateEvents) {
        event.stopPropagation();
      }
      document.removeEventListener(Events.TouchMove, this._pinch);
      this._endValues();
      this.layer.emit(Events.PinchEnd, event);
      return this._isPinching = false;
    }
  };

  LayerPinch.prototype._calculateDistance = function(event) {
    var distance, length, points, touches;
    length = event.targetTouches.length - 1;
    touches = event.targetTouches;
    points = {
      x: Math.pow(touches[length].pageX - touches[0].pageX, 2),
      y: Math.pow(touches[length].pageY - touches[0].pageY, 2)
    };
    distance = Math.sqrt(points.x + points.y);
    _distances.push(distance);
    return this._distance = _distances.slice(-1)[0] - _distances.slice(0, 1)[0];
  };

  LayerPinch.prototype._calculateDirection = function() {
    var _direction;
    _direction = _distances.slice(-1)[0] - _distances.slice(-2, -1)[0];
    return this._direction = _direction > 0 ? "outward" : "inward";
  };

  LayerPinch.prototype._calculateAngle = function(event) {
    var angle, length, line, touches;
    length = event.targetTouches.length - 1;
    touches = event.targetTouches;
    line = {
      rise: touches[0].pageY - touches[length].pageY,
      run: touches[0].pageX - touches[length].pageX
    };
    angle = Math.atan(line.rise / line.run) * (180 / Math.PI);
    _angles.push(angle);
    return this._angle = _angles.slice(-1)[0] - _angles.slice(0, 1)[0];
  };

  LayerPinch.prototype._calculateMidPoint = function(event) {
    var i, len, midPoint, ref, touch, x, y;
    x = 0;
    y = 0;
    ref = event.targetTouches;
    for (i = 0, len = ref.length; i < len; i++) {
      touch = ref[i];
      x += touch.pageX;
      y += touch.pageY;
    }
    midPoint = {
      x: x / event.targetTouches.length,
      y: y / event.targetTouches.length
    };
    _midPoints.push(midPoint);
    this._midPoint = _midPoints.slice(-1)[0];
    return this._midPointDistance = _midPoints.slice(-1)[0] - _midPoints.slice(0, 1)[0];
  };

  LayerPinch.prototype._endValues = function() {
    this._previousDistance = this._distance = _distances.slice(-1)[0] - _distances.slice(0, 1)[0];
    this._previousAngle = this._angle = _angles.slice(-1)[0] - _angles.slice(0, 1)[0];
    this._previousMidPoint = this._midPoint = _midPoints.slice(-1)[0];
    this._previousMidPointDistance = _midPoints.slice(-1)[0] - _midPoints.slice(0, 1)[0];
    _fingers = [];
    _distances = [];
    _angles = [];
    return _midPoints = [];
  };

  LayerPinch.define("fingers", {
    get: function() {
      return this._fingers || 0;
    }
  });

  LayerPinch.define("distance", {
    get: function() {
      return this._distance || 0;
    }
  });

  LayerPinch.define("previousDistance", {
    get: function() {
      return this._previousDistance || 0;
    }
  });

  LayerPinch.define("direction", {
    get: function() {
      return this._direction || 0;
    }
  });

  LayerPinch.define("angle", {
    get: function() {
      return this._angle || 0;
    }
  });

  LayerPinch.define("previousAngle", {
    get: function() {
      return this._previousAngle || 0;
    }
  });

  LayerPinch.define("midPoint", {
    get: function() {
      return this._midPoint || 0;
    }
  });

  LayerPinch.define("previousMidPoint", {
    get: function() {
      return this._previousMidPoint || 0;
    }
  });

  LayerPinch.define("midPointDistance", {
    get: function() {
      return this._midPointDistance || 0;
    }
  });

  LayerPinch.define("previousMidPointDistance", {
    get: function() {
      return this._previousMidPointDistance || 0;
    }
  });

  return LayerPinch;

})(Framer.BaseClass);

},{}],"MultiTouchEvents":[function(require,module,exports){
var LayerPinch, _angles, _distances, _fingers, _midPoints,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Events.Pinch = "pinch";

Events.PinchEnd = "pinchend";

_fingers = [];

_distances = [];

_angles = [];

_midPoints = [];

exports.LayerMultiTouchGesture = (function(superClass) {
  extend(LayerMultiTouchGesture, superClass);

  function LayerMultiTouchGesture(options) {
    if (options == null) {
      options = {};
    }
    LayerMultiTouchGesture.__super__.constructor.call(this, options);
  }

  LayerMultiTouchGesture.define("pinch", {
    get: function() {
      return this._pinch != null ? this._pinch : this._pinch = new LayerPinch(this);
    },
    set: function() {
      if (_isBoolean(value)) {
        return this.pinch.enabled = value;
      }
    }
  });

  return LayerMultiTouchGesture;

})(Framer.Layer);

window.Layer = exports.LayerMultiTouchGesture;

LayerPinch = (function(superClass) {
  extend(LayerPinch, superClass);

  LayerPinch.define("propagateEvents", LayerPinch.simpleProperty("propagateEvents", true));

  function LayerPinch(layer) {
    this.layer = layer;
    this._pinchEnd = bind(this._pinchEnd, this);
    this._pinch = bind(this._pinch, this);
    this._pinchStart = bind(this._pinchStart, this);
    LayerPinch.__super__.constructor.apply(this, arguments);
    this.enabled = true;
    this.attach();
  }

  LayerPinch.prototype.attach = function() {
    return this.layer.on(Events.TouchStart, this._pinchStart);
  };

  LayerPinch.prototype.remove = function() {
    return this.layer.off(Events.TouchStart, this._pinchStart);
  };

  LayerPinch.prototype._pinchStart = function(event) {
    if (Utils.isMobile()) {
      this._fingers = event.targetTouches.length;
      if (this._fingers >= 2) {
        document.addEventListener(Events.TouchMove, this._pinch);
        return document.addEventListener(Events.TouchEnd, this._pinchEnd);
      }
    }
  };

  LayerPinch.prototype._pinch = function(event) {
    if (!this.enabled) {
      return;
    }
    event.preventDefault();
    if (!this.propagateEvents) {
      event.stopPropagation();
    }
    this._isPinching = true;
    this._fingers = event.targetTouches.length;
    if (this._fingers >= 2) {
      this._calculateDistance(event);
      this._calculateDirection(event);
      this._calculateAngle(event);
      this._calculateMidPoint(event);
      return this.layer.emit(Events.Pinch, event);
    }
  };

  LayerPinch.prototype._pinchEnd = function(event) {
    if (event.targetTouches.length <= 0 && this._isPinching) {
      if (!this.propagateEvents) {
        event.stopPropagation();
      }
      document.removeEventListener(Events.TouchMove, this._pinch);
      this._endValues();
      this.layer.emit(Events.PinchEnd, event);
      return this._isPinching = false;
    }
  };

  LayerPinch.prototype._calculateDistance = function(event) {
    var distance, length, points, touches;
    length = event.targetTouches.length - 1;
    touches = event.targetTouches;
    points = {
      x: Math.pow(touches[length].pageX - touches[0].pageX, 2),
      y: Math.pow(touches[length].pageY - touches[0].pageY, 2)
    };
    distance = Math.sqrt(points.x + points.y);
    _distances.push(distance);
    return this._distance = _distances.slice(-1)[0] - _distances.slice(0, 1)[0];
  };

  LayerPinch.prototype._calculateDirection = function() {
    var _direction;
    _direction = _distances.slice(-1)[0] - _distances.slice(-2, -1)[0];
    return this._direction = _direction > 0 ? "outward" : "inward";
  };

  LayerPinch.prototype._calculateAngle = function(event) {
    var angle, length, line, touches;
    length = event.targetTouches.length - 1;
    touches = event.targetTouches;
    line = {
      rise: touches[0].pageY - touches[length].pageY,
      run: touches[0].pageX - touches[length].pageX
    };
    angle = Math.atan(line.rise / line.run) * (180 / Math.PI);
    _angles.push(angle);
    return this._angle = _angles.slice(-1)[0] - _angles.slice(0, 1)[0];
  };

  LayerPinch.prototype._calculateMidPoint = function(event) {
    var i, len, midPoint, ref, touch, x, y;
    x = 0;
    y = 0;
    ref = event.targetTouches;
    for (i = 0, len = ref.length; i < len; i++) {
      touch = ref[i];
      x += touch.pageX;
      y += touch.pageY;
    }
    midPoint = {
      x: x / event.targetTouches.length,
      y: y / event.targetTouches.length
    };
    _midPoints.push(midPoint);
    this._midPoint = _midPoints.slice(-1)[0];
    return this._midPointDistance = _midPoints.slice(-1)[0] - _midPoints.slice(0, 1)[0];
  };

  LayerPinch.prototype._endValues = function() {
    this._previousDistance = this._distance = _distances.slice(-1)[0] - _distances.slice(0, 1)[0];
    this._previousAngle = this._angle = _angles.slice(-1)[0] - _angles.slice(0, 1)[0];
    this._previousMidPoint = this._midPoint = _midPoints.slice(-1)[0];
    this._previousMidPointDistance = _midPoints.slice(-1)[0] - _midPoints.slice(0, 1)[0];
    _fingers = [];
    _distances = [];
    _angles = [];
    return _midPoints = [];
  };

  LayerPinch.define("fingers", {
    get: function() {
      return this._fingers || 0;
    }
  });

  LayerPinch.define("distance", {
    get: function() {
      return this._distance || 0;
    }
  });

  LayerPinch.define("previousDistance", {
    get: function() {
      return this._previousDistance || 0;
    }
  });

  LayerPinch.define("direction", {
    get: function() {
      return this._direction || 0;
    }
  });

  LayerPinch.define("angle", {
    get: function() {
      return this._angle || 0;
    }
  });

  LayerPinch.define("previousAngle", {
    get: function() {
      return this._previousAngle || 0;
    }
  });

  LayerPinch.define("midPoint", {
    get: function() {
      return this._midPoint || 0;
    }
  });

  LayerPinch.define("previousMidPoint", {
    get: function() {
      return this._previousMidPoint || 0;
    }
  });

  LayerPinch.define("midPointDistance", {
    get: function() {
      return this._midPointDistance || 0;
    }
  });

  LayerPinch.define("previousMidPointDistance", {
    get: function() {
      return this._previousMidPointDistance || 0;
    }
  });

  return LayerPinch;

})(Framer.BaseClass);



},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
